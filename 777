Message: An error occurred while receiving the HTTP response to This could be due to the service endpoint binding not using the HTTP protocol. This could also be due to an HTTP request context being aborted by the server (possibly due to the service shutting down). See server logs for more details. 

https://rahulpnath.com/blog/signing-a-pdf-file-using-azure-key-vault/


https://alexbilbie.com/guide-to-oauth-2-grants/
https://github.com/aspnet/Docs/blob/master/aspnet/aspnet/overview/owin-and-katana/owin-oauth-20-authorization-server.md
https://www.c-sharpcorner.com/UploadFile/ff2f08/token-based-authentication-using-Asp-Net-web-api-owin-and-i/
https://andrewlock.net/an-introduction-to-oauth-2-using-facebook-in-asp-net-core/
https://www.c-sharpcorner.com/UploadFile/ff2f08/token-based-authentication-using-Asp-Net-web-api-owin-and-i/
https://stackoverflow.com/questions/19528496/bearer-token-authentication-with-asp-net-api
https://codecanyon.net/item/android-authentication-system/12408423?_ga=2.78328084.1293939932.1523287828-1177189780.1515190287
https://stackoverflow.com/questions/24180034/authenticated-access-to-webapi-via-facebook-token-from-android-app


https://stackoverflow.com/questions/30444137/asp-net-web-api-social-authentication-for-web-and-mobile


https://www.tmdn.org/tmview/welcome.html
https://www.narwhl.com/narwhl-maturity-model/
https://github.com/serilog/serilog-sinks-periodicbatching/blob/dev/src/Serilog.Sinks.PeriodicBatching/Sinks/PeriodicBatching/BatchedConnectionStatus.cs
https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Http.Owin/WebApiAppBuilderExtensions.cs
http://www.hackered.co.uk/articles/asp-net-mvc-creating-an-oauth-client-credentials-grant-type-token-endpoint
http://dhickey.ie/2014/02/bubbling-exceptions-in-nancy-up-the-owin-pipeline/

https://github.com/rohit5ram/carjoin/blob/master/app/src/main/java/com/pr/carjoin/activities/MainActivity.java
https://github.com/marcinbudny/applicationinsights-owinextensions/tree/develop/src
https://weblogs.asp.net/fredriknormen/log-message-request-and-response-in-asp-net-webapi
https://bytefish.de/blog/consistent_error_handling_with_nancy/
http://www.simoncropp.com/httpcompressionwithnancyfx
https://livebook.manning.com/#!/book/microservices-in-net-core/chapter-9/127
http://blog.jonathanchannon.com/2015/08/07/hypermedia-and-nancyfx/

http://dhickey.ie/2014/02/bubbling-exceptions-in-nancy-up-the-owin-pipeline/
https://github.com/alhardy/AppMetrics.Owin/blob/master/src/App.Metrics.Extensions.Owin/Middleware/PerRequestTimerMiddleware.cs
https://github.com/AppMetrics/Samples/blob/master/src/Web.Api.Net452/Startup.cs
https://gist.github.com/psantiago32/107b0a180ba928071d77eac76ad8d6c8
https://stackoverflow.com/questions/1038466/logging-raw-http-request-response-in-asp-net-mvc-iis7
https://lbadri.wordpress.com/2013/08/03/owin-authentication-middleware-for-hawk-in-thinktecture-identitymodel-45/
https://stackoverflow.com/questions/25584626/response-body-for-request-response-logging
https://stackoverflow.com/questions/32332028/owin-middleware-to-correlate-and-log-requests-and-responses
https://www.strathweb.com/2014/03/per-request-tracing-asp-net-web-api/
https://docs.influxdata.com/influxdb/v1.3/guides/writing_data/
https://blog.getseq.net/smart-logging-middleware-for-asp-net-core/


using Microsoft.Owin;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace WebApplication1nancy
{
    public class PacketTrackingMiddleware2 : OwinMiddleware
    {
        public PacketTrackingMiddleware2(OwinMiddleware next)
            : base(next)
        {
            
        }

        public override async Task Invoke(IOwinContext context)
        {
            //IOwinContext context = context;
            var request = context.Request;
            var response = context.Response;

            //capture details about the caller identity

            var identity = (request.User != null && request.User.Identity.IsAuthenticated)
                ? request.User.Identity.Name
                : "(anonymous)";

            var apiPacket = new ApiPacket
            {
                CallerIdentity = identity
            };

            //buffer the request stream in order to intercept downstream reads
            var requestBuffer = new MemoryStream();
            request.Body = requestBuffer;

            //buffer the response stream in order to intercept downstream writes
            var responseStream = response.Body;
            var responseBuffer = new MemoryStream();
            response.Body = responseBuffer;

            //add the "Http-Tracking-Id" response header
            //context.Response.OnSendingHeaders(state =>
            //{
            //    var ctx = state as IOwinContext;
            //    if (ctx == null) return;
            //    var resp = ctx.Response;

            //    //adding the tracking id response header so that the user
            //    //of the API can correlate the call back to this entry
            //    resp.Headers.Add("http-tracking-id", new[] { apiPacket.TrackingId.ToString("d") });
            //}, context);
            var responseHeaders = (IDictionary<string, string[]>)context.Environment["owin.ResponseHeaders"];
            responseHeaders["http-tracking-id"] = new[] { apiPacket.TrackingId.ToString("d") };

            //invoke the next middleware in the pipeline
            await this.Next.Invoke(context);

            //rewind the request and response buffers to record their content
            WriteRequestHeaders(request, apiPacket);
            requestBuffer.Seek(0, SeekOrigin.Begin);
            var requestReader = new StreamReader(requestBuffer);
            apiPacket.Request = await requestReader.ReadToEndAsync();

            WriteResponseHeaders(response, apiPacket);
            responseBuffer.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(responseBuffer);
            apiPacket.Response = await reader.ReadToEndAsync();

            //write the apiPacket to the database
            //await database.InsterRecordAsync(apiPacket);
            System.Diagnostics.Debug.WriteLine("TrackingId: " + apiPacket.TrackingId);

            //make sure the response we buffered is flushed to the client
            responseBuffer.Seek(0, SeekOrigin.Begin);
            await responseBuffer.CopyToAsync(responseStream);
        }
        private static void WriteRequestHeaders(IOwinRequest request, ApiPacket packet)
        {
            packet.Verb = request.Method;
            packet.RequestUri = request.Uri;
            packet.RequestHeaders = request.Headers;
        }
        private static void WriteResponseHeaders(IOwinResponse response, ApiPacket packet)
        {
            packet.StatusCode = response.StatusCode;
            packet.ReasonPhrase = response.ReasonPhrase;
            packet.ResponseHeaders = response.Headers;
        }        
    }
}
